apply_log_settings: true  # Configure Python logging when running the pipeline.
log_level: INFO  # Root logger level used if apply_log_settings is true.
# Base directories for resolving raw inputs, processed outputs, and optional fast-disk scratch space.
raw_base_dir: /mnt/f/johannes/pipelineIn          # Base path for raw animal data.
ref_base_dir: /mnt/nas_jlarsch/03_Common_Use/reference brains/ref_05_LB_Perrino_2p/          # Base path containing reference volumes.
output_base_dir: /mnt/f/johannes/pipelineOut          # Base path for processed artefacts.
fast_disk_base_dir: null                              # Optional high-speed scratch location for Suite2p (null disables dedicated fast disk).
reference_brain_filename: average_2p_noRot_orig.nrrd  # Path relative to ref_base_dir for the reference brain volume.

# Functional preprocessing: plane splitting and metadata export.
functional_preprocessing:
  mode: reuse  # Stage execution mode (skip/reuse/force) for functional preprocessing.
  root_subdir: 02_reg/00_preprocessing/2p_functional           # Relative output folder for functional preprocessing.
  planes_subdir: 01_individualPlanes                          # Subdirectory containing per-plane TIFF stacks.
  plane_filename_template: "{animal_id}_plane{plane_index}.tif"    # Naming pattern for individual plane TIFFs.
  metadata_filename_template: "{animal_id}_preprocessing_metadata.json"  # Metadata filename for plane splitting.

# Motion correction (Suite2p) configuration.
motion_correction:
  mode: reuse  # Stage execution mode for motion correction.
  planes_subdir: 01_individualPlanes                          # Location of plane TIFFs relative to functional root.
  motion_output_subdir: 02_motionCorrected                    # Destination for registered TIFFs.
  plane_folder_template: "plane{plane_index}"                 # Subdirectory naming for each plane.
  projections_subdir: projections                             # Folder for max/avg projection stacks.
  suite2p_output_subdir: 03_suite2p                           # Destination for Suite2p segmentation outputs.
  segmentation_folder_template: "plane{plane_index}"          # Naming for Suite2p segmentation folders.
  motion_filename_template: "{animal_id}_plane{plane_index}_mcorrected.tif"  # Registered TIFF filename.
  metadata_filename: "motion_metadata.json"                   # Suite2p metadata filename per plane.
  default_fps: 2.0                # Frame rate (Hz) applied to every functional session.

# Anatomy preprocessing.
anatomy_preprocessing:
  mode: reuse  # Stage execution mode for two-photon anatomy preprocessing.
  root_subdir: 02_reg/00_preprocessing/2p_anatomy              # Relative output folder for anatomy preprocessing.
  metadata_filename_template: "{animal_id}_anatomy_metadata.json"  # Anatomy metadata filename.
  stack_filename_template: "{animal_id}_anatomy_stack.tif"     # Preprocessed anatomy stack filename.

# Confocal preprocessing.
confocal_preprocessing:
  mode: reuse  # Stage execution mode (skip/reuse/force) for confocal preprocessing.
  root_subdir: 02_reg/00_preprocessing  # Output directory for per-session confocal artefacts.
  channel_filename_template: "channel_{channel}.tif"  # Naming pattern for per-channel TIFF stacks.
  metadata_filename_template: "{session_id}_confocal_metadata.json"  # Confocal preprocessing metadata filename.
  flip_horizontal: true  # Flip stacks left-right to match two-photon orientation.
  flip_z: true  # Reverse slice (Z) order to match two-photon orientation.

# FireANTs registration (anatomy → reference brain).
fireants_registration:
  mode: reuse  # Stage execution mode for anatomy→reference registration.
  output_subdir: 02_reg/02_fireants  # Output directory for FireANTs artefacts.
  warped_stack_template: "{animal_id}_anatomy_warped_fireants.tif"  # Warped anatomy stack filename pattern.
  fireants:
    device: cuda  # Preferred device used by FireANTs (falls back to CPU if unavailable).
    winsorize:
      enabled: true  # Apply percentile clipping before registration.
      lower_percentile: 1.0  # Lower percentile used for winsorisation.
      upper_percentile: 99.0  # Upper percentile used for winsorisation.
    moments_scale: 4  # Downsampling factor for the initial moments registration.
    affine:
      scales: [12, 8, 4, 2, 1]  # Multiscale pyramid levels for affine registration.
      iterations: [200, 200, 200, 100, 50]  # Iterations at each affine scale.
      optimizer: Adam  # Optimiser used during affine registration.
      optimizer_lr: 0.003  # Learning rate for the affine optimiser.
      cc_kernel_size: 31  # Cross-correlation kernel size.
      tolerance: 1e-6  # Convergence tolerance for affine stage.
      max_tolerance_iters: 10  # Max iterations to check tolerance before stopping.
      loss_type: fusedcc  # Loss function used during affine registration.
      extra_args: {}  # Additional FireANTs affine parameters.
    greedy:
      enabled: true  # Enable greedy (non-linear) registration stage.
      scales: [12, 8, 4, 2, 1]  # Multiscale pyramid levels for greedy registration.
      iterations: [200, 200, 200, 100, 25]  # Iterations at each greedy scale.
      optimizer: Adam  # Optimiser used during greedy registration.
      optimizer_lr: 0.5  # Learning rate for the greedy optimiser.
      cc_kernel_size: 31  # Cross-correlation kernel size for greedy stage.
      loss_type: fusedcc  # Loss function used during greedy registration.
      smooth_grad_sigma: 5.0  # Gradient smoothing sigma for greedy updates.
      smooth_warp_sigma: 3.0  # Warp smoothing sigma for greedy updates.
      deformation_type: compositive  # Greedy deformation model.
      optimizer_params: {}  # Additional optimiser parameters.
      loss_params: {}  # Additional loss parameters.
      extra_args: {}  # Additional FireANTs greedy parameters.
    qc_middle_plane: null  # Optional QC slice index (null uses middle).
    qc_figsize: [10, 6]  # QC figure size in inches.

# Functional → anatomy registration.
functional_to_anatomy_registration:
  mode: reuse
  registration_output_subdir: 02_reg/07_2pf-a                 # Output folder for registration CSVs.
  projections_subdir: projections                             # Folder (under motion outputs) containing projection stacks.
  summary_csv: 02_reg/07_2pf-a/combined_registration_log.csv  # Aggregate registration summary CSV.
  summary_full_csv: 02_reg/07_2pf-a/combined_registration_full.csv  # Detailed per-plane registration CSV.
  registration_csv_template: "{animal_id}_registration_results.csv"  # Per-animal registration CSV filename.
  max_projection_filename_template: "{animal_id}_max_projections.tif"  # Max projection filename.
  avg_projection_filename_template: "{animal_id}_avg_projections.tif"  # Average projection filename.
  fixed_z_spacing_um: 1.0      # Axial spacing (µm) of anatomy stack slices.
  scale_window: 0.0            # Fractional window around expected scale (0 → single scale).
  n_scales: 1                  # Number of scales sampled within the window.
  z_stride_coarse: 8           # Coarse z stride for initial search.
  z_refine_radius: 10          # Radius (planes) used for z refinement.
  gaussian_sigma: 1.0          # Gaussian smoothing sigma applied during preprocessing.
  early_stop_score: 0.995      # Stop search once NCC exceeds this threshold (set null to disable).

# Confocal → anatomy registration.
confocal_to_anatomy_registration:
  mode: reuse  # Stage execution mode (skip/reuse/force).
  output_root_subdir: 02_reg  # Base directory for confocal→anatomy artefacts.
  registration_subdir_template: "{confocal_session_id}_to_{anatomy_session_id}"  # Folder name pattern per confocal session.
  reference_channel_name: gcamp  # Confocal channel used as moving volume.
  warped_channel_template: "{animal_id}_{confocal_session_id}_{channel}_warped.tif"  # Output warped-channel filename pattern.
  metadata_filename_template: "{animal_id}_{confocal_session_id}_registration_metadata.json"  # Registration metadata filename.
  transforms_subdir: transforms  # Subdirectory storing affine/warp transforms.
  qc_subdir: qc  # Subdirectory storing QC figures.
  crop_to_extent: false  # Crop confocal XY extent to approximate anatomy coverage.
  crop_padding_um: 0  # Extra padding (µm) kept around the cropped confocal volume.
  prematch:  # XY-MIP prematch heuristics to seed FireANTs.
    enabled: true
    mip_percentiles: [2.0, 99.5]
    gaussian_sigma_px: 1.0
    downsample_max_dim: 512
    rotation_coarse_step_deg: 22.5
    rotation_fine_step_deg: 1.5
    rotation_fine_window_deg: 6.0
    evaluate_opposite_flip: true
    min_score: 0.2
  mask_margin_xy: .0  # Fraction or voxels trimmed laterally when masking.
  mask_margin_z: .0  # Fraction or voxels trimmed along Z when masking.
  mask_soft_edges: false  # Blend mask edges with a raised-cosine taper instead of a hard cutoff.
  histogram_match: false  # Apply histogram matching before registration.
  histogram_levels: 64  # Histogram levels used during histogram matching.
  histogram_match_points: 12  # Number of match points for histogram matching.
  histogram_threshold_at_mean: false  # Threshold histogram matching at mean intensity.
  initial_translation_mode: none  # Seed affine translation (none|crop|centroid).
  fireants:
    device: cuda
    winsorize:
      enabled: true
      lower_percentile: 2.5
      upper_percentile: 99.0
    moments_scale: 4
    affine:
      scales: [12, 8, 4, 2, 1]
      iterations: [200, 200, 200, 100, 50]
      optimizer: Adam
      optimizer_lr: 0.001
      cc_kernel_size: 51
      tolerance: 1e-7
      max_tolerance_iters: 20
      loss_type: fusedmi
      extra_args: {}
    greedy:
      enabled: false
      scales: [12, 8, 4, 2, 1]
      iterations: [200, 200, 200, 100, 50]
      optimizer: Adam
      optimizer_lr: 0.2
      cc_kernel_size: 41
      loss_type: fusedcc
      smooth_grad_sigma: 6.0
      smooth_warp_sigma: 5.0
      deformation_type: compositive
      optimizer_params: {}
      loss_params: {}
      extra_args: {}
    qc_middle_plane: null
    qc_figsize: [10, 6]

# Processing log output (optional).
processing_log:
  enabled: true                # Write per-animal processing logs.
  directory: metadata/processed  # Directory for generated processing log YAMLs.
  filename_template: "{animal_id}.yaml"  # Filename pattern for processing logs.
